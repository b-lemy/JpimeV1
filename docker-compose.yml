#specifies the version of docker compose
version: '3.8'
#define services/containers to be run
services:
  #frontend service standard  naming convention we can use 'web'
  frontend:
    networks:
      - app
    #we specify that the web depends on the api service means the backend
    #will start before frontend
    depends_on:
      - backend
    # to keep the connection live
    tty: true
    build:
      #specify the build content of the frontend service
      #specifices the directory where the dockerfile for the frontend service is located
      context: ./frontend
      dockerfile: Dockerfile
    #specifies the ports to be exposed (port in host machine : port inside the container)
    ports:
      - "3000:3000"
    #specifiy envronment variables if any
    environment:
      URL: #######
    volumes:
      - /app/node_modules
      - ./frontend:/app
    restart: on-failure

  #define the api service
  backend:
    networks:
      - app
    build:
      context: ./backend
      dockerfile: Dockerfile

    environment:
      DB_HOST: db
      DB_DATABASE: backend
      DB_USERNAME: root
      DB_PASSWORD: Xsw21qaz
    ports:
      - "8000:8000"

    restart: on-failure
    depends_on:
     - db
    volumes:
      - ./backend:/var/www/html

  db:
    networks:
      - app
    # I will use a specific version that using latest
    image: mysql:8.3.0
    environment:
      MYSQL_ROOT_PASSWORD: 'Xsw21qaz'
      MYSQL_ROOT_HOST: 'localhost'
      MYSQL_DATABASE:  'backend'
      MYSQL_USER: 'brian'
      MYSQL_PASSWORD: 'Xsw21qaz'
      MYSQL_ALLOW_EMPTY_PASSWORD: 1

    volumes:
      - .dbdata:/var/lib/mysql

    restart: unless-stopped
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", 'ping' ,"Xsw21qaz"]
      retries: 3
      timeout: 5s

  phpmyadmin:
    image: phpmyadmin:latest
    depends_on:
      - db
    ports:
     - "8008:80"

    environment:
      -PMA_HOST: db
      -PMA_PASSWORD: 'Xsw21qaz'
    #  - PMA_ARBITRARY=1
    restart: unless-stopped

#automate migrate and seeding


#    image: nginx:latest  # OR APACHE for this project

#This will enable all services to be on the same network
networks:
  app:
    driver: bridge